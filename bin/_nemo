#!/usr/bin/env node
'use strict';


/**
 * Module dependencies.
 */

var program = require('commander');
var path = require('path');
var fs = require('fs');
var cwd = process.cwd();
var debug;
var log;
var server;
var scaffold;
var engine;

function list(val) {
  return val.split(',');
}

function cwdPath(rel) {
  return path.resolve(cwd, rel);
}

program
  .version(JSON.parse(fs.readFileSync(path.join(__dirname, '..', 'package.json'), 'utf8')).version)
  .usage('[options]')
  .option('-B, --base-directory <path>', 'parent directory for config/ and spec/ (or other test file) directories. relative to cwd', cwdPath)
  .option('-P, --profile [profile]', 'which profile(s) to run, out of the configuration', list)
  .option('-G, --grep <pattern>', 'only run tests matching <pattern>', list)
  .option('-F, --file ', 'run parallel by file')
  .option('-D, --data ', 'run parallel by data')
  .option('-S, --server ', 'run the nemo web server')
  .option('-L, --logging ', 'info level logging (errors log by default)')
  .option('-X, --scaffold <path>', 'inject an example nemo suite under <path>')
  .option('--debug-brk', 'enable node\'s debugger breaking on the first line')
  .option('--inspect', 'activate devtools in chrome')
  .option('--no-timeouts', 'remove timeouts in debug/inspect use case')
    .option('-L, --locales [locale]', 'locales you wany to run in')
    .option('-C, --maxConcurrent number', 'Maximum number of tests to run at same time')
    .option('-M , --data-path [file]', 'path to the local data file', list)
    .option('-I , --single-locale-mode Null', 'run with only the first locale in dataprovider')
  .parse(process.argv);

program._name = 'nemo';
if (program.logging) {
  process.env.DEBUG = (process.env.DEBUG) ? `${process.env.DEBUG},` : '';
  process.env.DEBUG += 'nemo*';
}

// load these after the DEBUG var is set
server = require('../lib/server');
scaffold = require('../lib/scaffold');
engine = require('../lib/engine');
debug = require('debug');
log = debug('nemo:log');

// are we launching the server?
if (program.server) {
  log('CLI launching server');
  return server(program);
}
if (program.scaffold) {
  log('launching scaffold');
  return scaffold(program);
}
log('CLI launching runner');
engine.configure(program)
  .then(function (configuration) {
    return engine.start(configuration);
  })
  .catch(function (err) {
    console.error('problem with start %O', err);
  });
